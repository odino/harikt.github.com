<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: auraphp | Random thoughts | Hari KT]]></title>
  <link href="http://harikt.com/blog/categories/auraphp/atom.xml" rel="self"/>
  <link href="http://harikt.com/"/>
  <updated>2013-02-27T07:49:33+05:30</updated>
  <id>http://harikt.com/</id>
  <author>
    <name><![CDATA[Hari K T]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Aura turns 2]]></title>
    <link href="http://harikt.com/blog/2013/02/22/aura-turns-2/"/>
    <updated>2013-02-22T23:07:00+05:30</updated>
    <id>http://harikt.com/blog/2013/02/22/aura-turns-2</id>
    <content type="html"><![CDATA[<p>Looking over <a href="https://github.com/auraphp/Aura.Router/commit/8de403dc49bf803a1fd641f55726079853716ab7">the commits on Aura.Router</a>, <a href="https://github.com/auraphp/Aura.Signal">Aura.Signal</a> etc you will
notice, <a href="https://github.com/auraphp">aura project</a> has turned 2.</p>

<p>And today, I would like to introduce you, the new born baby still under active
development and refactoring based on user feedback, the
<a href="https://github.com/auraphp/Aura.Input">form library for php, Aura.Input</a>.</p>

<p>The <a href="https://github.com/auraphp/Aura.Input">Aura.Input</a>, doesn't have a rendering functionality. But you can always
use Aura.View or create your own helpers.</p>

<p>A basic filtering based on closure exists in <a href="https://github.com/auraphp/Aura.Input">Aura.Input</a>. But you are
not limited, you can use your own filtering components or
integrate <a href="https://github.com/auraphp/Aura.Filter">Aura.Filter</a>.</p>

<p>Let us look at some code.</p>

<p>```php
&lt;?php
// use composer or require '/path/to/Aura.Input/src.php';</p>

<p>use Aura\Input\Filter;
use Aura\Input\Form;
use Aura\Input\FieldCollection;
use Aura\Input\FieldFactory;
use Aura\Input\Options;</p>

<p>$filter = new Aura\Input\Filter();</p>

<p>// validate
$filter->setRule('name', 'Name should be alpha only', function ($value) {</p>

<pre><code>return ctype_alpha($value);
</code></pre>

<p>});</p>

<p>$filter->setRule('email', 'Enter a valid email address', function ($value) {</p>

<pre><code>return filter_var($value, FILTER_VALIDATE_EMAIL);
</code></pre>

<p>});</p>

<p>$filter->setRule('url', 'Enter a valid url', function ($value) {</p>

<pre><code>return filter_var($value, FILTER_VALIDATE_URL);
</code></pre>

<p>});</p>

<p>$filter->setRule('message', 'Message should be more than 7 characters', function ($value) {</p>

<pre><code>if (strlen($value) &gt; 7) {
    return true;
}
return false;
</code></pre>

<p>});</p>

<p>class ContactForm extends Form
{</p>

<pre><code>public function init()
{
    $name    = $this-&gt;setField('name');
    $email   = $this-&gt;setField('email');
    $url     = $this-&gt;setField('url');
    $message = $this-&gt;setField('message', 'textarea');
}
</code></pre>

<p>}</p>

<p>$form = new ContactForm(new FieldCollection(new FieldFactory), new Options, $filter);</p>

<p>$values = [</p>

<pre><code>'name' =&gt; 'Hari K T',
'email' =&gt; 'oh will it works!',
'url' =&gt; 'google.com',
'message' =&gt; 'Aweso'
</code></pre>

<p>];</p>

<p>$form->setValues($values);</p>

<p>$passed = $form->filter();</p>

<p>// 'foo' is invalid
if (! $passed) {</p>

<pre><code>// get all messages
$actual = $form-&gt;getMessages();
var_dump($actual);
</code></pre>

<p>}
```</p>

<p>Try it out, we have some more documentation for the <a href="https://github.com/auraphp/Aura.Input">Aura.Input</a>. I warn
the api is still not stable for <a href="https://github.com/auraphp/Aura.Input">Aura.Input</a> and is not yet released a Beta.</p>

<p>But it is a good start!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Aura.Http : Request and Response]]></title>
    <link href="http://harikt.com/blog/2013/02/16/aura-dot-http-request-and-response/"/>
    <updated>2013-02-16T14:44:00+05:30</updated>
    <id>http://harikt.com/blog/2013/02/16/aura-dot-http-request-and-response</id>
    <content type="html"><![CDATA[<p>The <code>Aura.Http</code> package provide you the tool to build and send request and response.</p>

<h1>Instantiation:</h1>

<p>The easiest way is</p>

<p><code>php
$http = require 'path/to/Aura.Http/scripts/instance.php';
</code></p>

<p>What it gives you is an object of <code>Aura\Http\Manager</code>. If you want to create
manually you can look into the <code>instance.php</code></p>

<h1>Building your Response</h1>

<p>Probably you may not have bothered too much on building the http response
either the framework does it for you, or until you need to send the correct
response.</p>

<p>To create a proper http response via <code>Aura.Http</code> we need to create a
response object.</p>

<p><code>php
$response = $http-&gt;newResponse();
</code></p>

<p>Now you have the response object. You can set the <code>header</code> via</p>

<p><code>php
$response-&gt;headers-&gt;set('Header', 'Value');
</code>
If you have an array of headers you can use <code>setAll</code></p>

<p>```php
$response->headers->setAll([</p>

<pre><code>'Header-One' =&gt; 'header one value',
'Header-Two' =&gt; [
    'header two value A',
    'header two value B',
    'header two value C',
],
</code></pre>

<p>]);
```</p>

<p>So a basic example of setting header value is</p>

<p><code>php
$response-&gt;headers-&gt;set('Content-Type', 'text/plain');
</code></p>

<h2>Setting Content</h2>

<p>The header values are for the browser to understand what is coming from
server, and how it should render etc.</p>

<p>So we need to set the content. This can be achieved via <code>setContent</code> method.</p>

<p><code>php
$response-&gt;setContent('&lt;html&gt;&lt;head&gt;&lt;title&gt;&lt;/title&gt;&lt;/head&gt;&lt;body&gt;Hello World!&lt;/body&gt;&lt;/html&gt;');
</code></p>

<p>You can always get the content via calling <code>getContent</code>.</p>

<h2>Setting and Getting Cookies</h2>

<p>Sometimes we may want to set the cookies. You can do it as</p>

<p>```php
$response->cookies->set('cookie_name', [</p>

<pre><code>'value'    =&gt; 'cookie value', // cookie value
'expire'   =&gt; time() + 3600,  // expiration time in unix epoch seconds
'path'     =&gt; '/path',        // server path for the cookie
'domain'   =&gt; 'example.com',  // domain for the cookie
'secure'   =&gt; false,          // send by ssl only?
'httponly' =&gt; true,           // send by http/https only?
</code></pre>

<p>]);
<code>``
The array keys mimic the [setcookie][] parameters. If you have an array
you can use</code>setAll`.</p>

<p>```php
$response->cookies->setAll([</p>

<pre><code>'cookie_foo' =&gt; [
    'value' =&gt; 'value for cookie foo',
],
'cookie_bar' =&gt; [
    'value' =&gt; 'value for cookie bar',
],
</code></pre>

<p>]);
```</p>

<p>You can get a cookie by calling <code>get</code> method on cookies.</p>

<p><code>php
$response-&gt;cookies-&gt;get('cookie_name');
</code></p>

<h2>Setting and Getting Status</h2>

<p>By default the status code is 200. But at some point of time
like the one I explained earlier in <a href="http://harikt.com/blog/2012/12/16/status-code-304/">Status Code 304</a>, we don't need to
send the whole content. But just the status code.</p>

<p>This is possible via <code>setStatusCode</code> and <code>setStatusText</code></p>

<p><code>php
$response-&gt;setStatusCode(304);
$response-&gt;setStatusText('Same As It Ever Was');
</code></p>

<h2>Sending your response</h2>

<p>And finally we can send the response back. We can call the <code>send</code>
method and pass the <code>response</code> object.</p>

<p><code>php
$http-&gt;send($response);
</code></p>

<p>The full source code of example is</p>

<p><code>php
$http = require 'path/to/Aura.Http/scripts/instance.php';
// send a response
$response = $http-&gt;newResponse();
$response-&gt;headers-&gt;set('Content-Type', 'text/plain');
$response-&gt;setContent('&lt;html&gt;&lt;head&gt;&lt;title&gt;&lt;/title&gt;&lt;/head&gt;&lt;body&gt;Hello World!&lt;/body&gt;&lt;/html&gt;');
$http-&gt;send($response);
</code></p>

<p>From terminal start the server by <code>php -S localhost:8000 example.php</code> and
pointintg to <code>localhost:8000</code> in your browser.</p>

<p>In order to render just <code>Hello World!</code> in the browser the <code>Content-Type</code> we added should be
<code>text/html</code>.</p>

<p>We can always change the header status code, content-type etc
before we call <code>send()</code> method.</p>

<p>Let us modify the example at <a href="http://harikt.com/blog/2012/12/16/status-code-304/">Status Code 304</a></p>

<p>```php
$http = require 'path/to/Aura.Http/scripts/instance.php';
$response = $http->newResponse();
if ( isset($_SERVER['HTTP_IF_MODIFIED_SINCE']) &amp;&amp;</p>

<pre><code>$_SERVER['HTTP_IF_MODIFIED_SINCE'] == 'Tue, 15 Jan 2011 12:00 GMT' ) {
$response-&gt;setStatusCode(304);
</code></pre>

<p>} else {</p>

<pre><code>$response-&gt;headers-&gt;set('Content-Type', 'text/html');
$response-&gt;headers-&gt;set('Last-Modified', 'Tue, 15 Jan 2011 12:00 GMT');
$response-&gt;setContent('&lt;html&gt;&lt;head&gt;&lt;title&gt;&lt;/title&gt;&lt;/head&gt;&lt;body&gt;Hello World!&lt;/body&gt;&lt;/html&gt;');
</code></pre>

<p>}
$http->send($response);
```</p>

<p>You would have noticed I have used <code>$_SERVER</code> variable. In <code>Aura.Http</code>,
there is no methods to access the global server values. This is because
the <code>$_SERVER</code> values are not the exact http requested header. The server
modifies the request and we will be only getting the manipulated values
if we use <code>$_SERVER</code>, <code>$_GET</code>, <code>$_POST</code> values.</p>

<p><code>Aura.Http</code> only helps you to build, create, modify response and request.</p>

<h1>Creating Http Request</h1>

<p>We talked about response so far. What does Request actually mean?</p>

<p>Client -> Request something -> Server Responds</p>

<p>So that means we are trying to be a client or a browser, and making the necessary
headers and sending to server to get the corresponding response.</p>

<p>We can get all the repos of a user in github via curl.</p>

<p><code>
curl -i https://api.github.com/users/pmjones/repos
</code></p>

<p>The same can be achieved via <a href="https://github.com/auraphp/Aura.Http">Aura.Http</a>. The <a href="https://github.com/auraphp/Aura.Http">Aura.Http</a> provides a
means to do the same with PHP. It uses <code>curl</code> if it is available or <code>stream</code>
to make this happen.</p>

<p>You need to create a Request object.</p>

<p><code>php
$request = $http-&gt;newRequest();
</code></p>

<p>Set the url via <code>setUrl</code> method and send.</p>

<p>```php
$request->setUrl('https://api.github.com/users/pmjones/repos');
$stack = $http->send($request);
$repos = json_decode($stack[0]->content);
foreach ($repos as $repo) {</p>

<pre><code>echo $repo-&gt;name . PHP_EOL;
</code></pre>

<p>}
```</p>

<p>There are more things to say. It can do basic authentication, post values etc.
Browse the documentation examples, source code, tests, and api.</p>

<p>Source Code : <a href="https://github.com/auraphp/Aura.Http">https://github.com/auraphp/Aura.Http</a></p>

<p>Documentation : <a href="http://auraphp.github.com/Aura.Http/version/1.0.0/">http://auraphp.github.com/Aura.Http/version/1.0.0/</a></p>

<p>API : <a href="http://auraphp.github.com/Aura.Http/version/1.0.0/api/">http://auraphp.github.com/Aura.Http/version/1.0.0/api/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Aura Framework releases Beta4]]></title>
    <link href="http://harikt.com/blog/2012/12/18/aura-framework-releases-beta4/"/>
    <updated>2012-12-18T23:25:00+05:30</updated>
    <id>http://harikt.com/blog/2012/12/18/aura-framework-releases-beta4</id>
    <content type="html"><![CDATA[<p>Aura.Framework released Beta4. In this release <a href="http://auraphp.github.com/Aura.Framework">Aura.Framework</a> has extracted the Hello Word package and renamed it as <a href="http://auraphp.github.com/Aura.Demo">Aura.Demo</a>.</p>

<p>You can get the system as a whole from <a href="http://auraphp.github.com/system/downloads/">http://auraphp.github.com/system/downloads/</a></p>

<p>Read about the release from <a href="http://auraphp.github.com/2012/12/18/new-system-release/">blog post</a> and join discussion at <a href="https://groups.google.com/d/topic/auraphp/uPsSK7OqOoI/discussion">auraphp group</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Aura.Sql can now make use of existing PDO connection]]></title>
    <link href="http://harikt.com/blog/2012/12/06/node-227/"/>
    <updated>2012-12-06T19:27:00+05:30</updated>
    <id>http://harikt.com/blog/2012/12/06/node-227</id>
    <content type="html"><![CDATA[<p>Aura.Sql can now make use of an existing PDO connection with the recent <a href="https://github.com/auraphp/Aura.Sql/commit/79284382ef6351d81719376063076c7e511c28fd">commit here</a> . This all came after a short discussion with Stan Lemon. A big Thanks to him for making a featured request like this.     > @<a href="https://twitter.com/harikt">harikt</a> can I inject an existing Pdo > object? > > — Stan Lemon (@stanlemon) > <a href="https://twitter.com/stanlemon/status/274708971217100800">December 1, 2012</a>     How to make use of an existing PDO?  You want to get a connection object and set the instance of pdo. Note : In this way you are eager loading the PDO. Else Aura.Sql knows when to do the connection. Example of how to make use of it is</p>

<p>```php
use Aura\Sql\ConnectionFactory;
$connection_factory = new ConnectionFactory;
$connection = $connection_factory->newInstance(</p>

<pre><code>// connection name 
'mysql', 
// DSN elements for PDO; this can also be 
// an array of key-value pairs 
// host=127.0.0.1;dbname=database-name 
'', 
// username for the connection 
'', 
// password for the connection 
'' 
</code></pre>

<p>);
$connection->setPdo($pdo);
```</p>

<p>Normally you need to pass the dsn as a string or array. But if you are having the PDO object and you don't love to do, you can pass it as null. Then to the connection object set the pdo instance. Now you can make use of the Aura.Sql insert ,update , delete queries. For a detailed information of how to do check the docs at <a href="https://github.com/auraphp/Aura.Sql">Aura.Sql</a> .  Assuming you have a PDO object created something like the one below</p>

<p>```php
$params = array(</p>

<pre><code>'driver' =&gt; 'pdo_mysql', 
'user' =&gt; 'username', 
'password' =&gt; 'password', 
'dbname' =&gt; 'database-name' 
</code></pre>

<p>);
$dsn = 'mysql:host=localhost;dbname=' . $params['dbname'];
$pdo = new Pdo(</p>

<pre><code>$dsn, 
$params['user'], 
$params['password'], 
$options = array( PDO::MYSQL_ATTR_INIT_COMMAND =&gt; 'SET NAMES utf8', ) 
</code></pre>

<p>);
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[First stable release for Aura components]]></title>
    <link href="http://harikt.com/blog/2012/11/29/node-225/"/>
    <updated>2012-11-29T20:46:00+05:30</updated>
    <id>http://harikt.com/blog/2012/11/29/node-225</id>
    <content type="html"><![CDATA[<p>So today @Paul M Jones officially declared the first stable release for Aura PHP components. Yes, I am really excited to see this release for it comes with a ton of great improvements for many components, bug fixes and sadly some BC breaks also. The list of packages which became stable are https://github.com/auraphp/Aura.Autoload https://github.com/auraphp/Aura.Cli https://github.com/auraphp/Aura.Di https://github.com/auraphp/Aura.Http https://github.com/auraphp/Aura.Marshal https://github.com/auraphp/Aura.Router : Yes I want to update the post at phpmaster.com for it has some breaks. I will be doing it in coming days. https://github.com/auraphp/Aura.Signal https://github.com/auraphp/Aura.Sql https://github.com/auraphp/Aura.View https://github.com/auraphp/Aura.Web https://github.com/auraphp/Aura.Uri : uri manipulation and there are some packages that are releasing the first Beta. Though these packages have been there for sometime, this is officially declared now only. Yes a bit delay from our part to declare it. https://github.com/auraphp/Aura.Filter Filter is an awesome component for Sanitizing and Validating. You guys should look into the core to learn how it works really. Its an awesome piece of work! . I will in the coming days write something about it. https://github.com/auraphp/Aura.Intl for Internationalization https://github.com/auraphp/Aura.Session : for session handling Thanks to all to make the release happen. You can read the official declaration at http://paul-m-jones.com/archives/2976 . Join our mailing list https://groups.google.com/forum/#!forum/auraphp or #auraphp at irc.freenode.net .</p>
]]></content>
  </entry>
  
</feed>
